@article{Hastings2007,
abstract = {Particle systems are a representation, computation, and rendering method for special effects such as fire, smoke, explosions, electricity, water, magic, and many other phenomena. This paper presents NEAT particles, a new design, representation, and animation method for particle systems tailored to real-time effects in video games and simulations. In NEAT particles, the neuroevolution of augmenting topologies (NEAT) method evolves artificial neural networks (ANN) that control the appearance and motion of particles. NEAT particles affords three primary advantages over traditional particle effect development methods. First, it decouples the creation of new particle effects from mathematics and programming, enabling users with little knowledge of either to produce complex effects. Second, it allows content designers to evolve a broader range of effects than typical development tools through a form of interactive evolutionary computation (IEC). And finally, it acts as a concept generator, allowing users to interactively explore the space of possible effects. In the future such a system may allow content to be evolved in the game itself, as it is played},
author = {Hastings, Erin and Guha, Ratan and Stanley, Kenneth O.},
doi = {10.1109/CIG.2007.368092},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Hastings, Guha, Stanley - 2007 - NEAT particles Design, representation, and animation of particle system effects.pdf:pdf},
isbn = {1424407095},
journal = {Proceedings of the 2007 IEEE Symposium on Computational Intelligence and Games, CIG 2007},
keywords = {IEC,Interactive evolutionary computation,NEAT,NeuroEvolution of augmenting topologies,Particle systems},
number = {1},
pages = {154--160},
title = {{NEAT particles: Design, representation, and animation of particle system effects}},
year = {2007}
}
@article{Nicolau2009,
abstract = {Harnessing the hardware parallelism of the emerging multi-cores systems necessitates concurrent software. Unfortunately, most of the existing mainstream software is sequential in nature. Although one could auto-parallelize a given program, the efficacy of this is largely limited to floating-point codes. One of the ways to alle- viate the above limitation is to parallelize programs, which can- not be auto-parallelized, via explicit synchronization. In this re- gard, efficient placement of the synchronization primitives – say, post, wait – plays a key role in achieving high degree of thread- level parallelism (TLP). In this paper, we propose novel compiler techniques for the above. Specifically, given a control flow graph (CFG), the proposed techniques place a post as early as possible and place a wait as late as possible in the CFG, subject to depen- dences. We demonstrate the efficacy of our techniques, on a real machine, using real codes, specifically, from the industry-standard SPEC CPU benchmarks, the Linux kernel and other widely used open source codes. Our results show that the proposed techniques yield significantly higher levels of TLP than the state-of-the-art. Categories},
author = {Nicolau, Alexandru and Li, Guangqiang and Kejariwal, Arun},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Nicolau, Li, Kejariwal - 2009 - Techniques for efficient placement of synchronization primitives.pdf:pdf},
isbn = {9781605583976},
issn = {15232867},
journal = {ACM SIGPLAN Notices},
keywords = {Compilers,Multithreading,Parallelization,Performance},
number = {4},
pages = {199--208},
title = {{Techniques for efficient placement of synchronization primitives}},
volume = {44},
year = {2009}
}
@article{Cong2013,
author = {Cong, Guojing and Wen, Huifang},
doi = {10.1145/2482767.2482777},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Cong, Wen - 2013 - Mapping applications for high performance on multithreaded, NUMA systems.pdf:pdf},
isbn = {9781450320535},
journal = {Proceedings of the ACM International Conference on Computing Frontiers, CF 2013},
keywords = {Binding,Locality,Multithreading,NUMA},
title = {{Mapping applications for high performance on multithreaded, NUMA systems}},
year = {2013}
}
@article{Chen2012,
author = {Chen, Kai Chun and Chen, Pei Shan and Wong, Sai Keung},
doi = {10.1145/2407516.2407594},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Chen, Chen, Wong - 2012 - A hybrid method for water droplet simulation.pdf:pdf},
isbn = {9781450318259},
journal = {Proceedings - VRCAI 2012: 11th ACM SIGGRAPH International Conference on Virtual-Reality Continuum and Its Applications in Industry},
keywords = {height map,particle system,simulation,water droplets},
pages = {341--344},
title = {{A hybrid method for water droplet simulation}},
year = {2012}
}
@article{Wojtan2006,
abstract = {Control of physical simulation has become a popular topic in the field of computer graphics. Keyframe control has been applied to simulations of rigid bodies, smoke, liquid, flocks, and finite element-based elastic bodies. In this paper, we create a framework for controlling systems of interacting particles - paying special attention to simulations of cloth and flocking behavior. We introduce a novel integrator-swapping approximation in order to apply the adjoint method to linearized implicit schemes appropriate for cloth simulation. This allows the control of cloth while avoiding computationally infeasible derivative calculations. Meanwhile, flocking control using the adjoint method is significantly more efficient than currently-used methods for constraining group behaviors, allowing the controlled simulation of greater numbers of agents in fewer optimization iterations.},
author = {Wojtan, Chris and Mucha, Peter J. and Turk, Greg},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Wojtan, Mucha, Turk - 2006 - Keyframe control of complex particle systems using the adjoint method.pdf:pdf},
isbn = {3905673347},
journal = {Computer Animation, Conference Proceedings},
pages = {15--23},
title = {{Keyframe control of complex particle systems using the adjoint method}},
volume = {02-04-September-2006},
year = {2006}
}
@article{Ilmonen2003,
author = {Ilmonen, Tommi and Kontkanen, Janne},
file = {:Users/robin/Desktop/J11.pdf:pdf;:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Ilmonen, Kontkanen - 2003 - The second order particle system.pdf:pdf},
issn = {1213-6972},
keywords = {article,computer animation,dynamika kapalin,fluid dynamics,fyzik{\'{a}}ln{\'{i}} modelov{\'{a}}n{\'{i}},physical modelling,po{\v{c}}{\'{i}}ta{\v{c}}ov{\'{a}} animace,{\v{c}}l{\'{a}}nek},
title = {{The second order particle system}},
year = {2003}
}
@article{Hastings2009,
abstract = {Interactive Evolutionary Computation (IEC) creates the intriguing possibility that a large variety of useful content can be produced quickly and easily for practical computer graphics and gaming applications. To show that IEC can produce such content, this paper applies IEC to particle system effects, which are the de facto method in computer graphics for generating fire, smoke, explosions, electricity, water, and many other special effects. While particle systems are capable of producing a broad array of effects, they require substantial mathematical and programming knowledge to produce. Therefore, efficient particle system generation tools are required for content developers to produce special effects in a timely manner. This paper details the design, representation, and animation of particle systems via two IEC tools called NEAT Particles and NEAT Projectiles. Both tools evolve artificial neural networks (ANN) with the NeuroEvolution of Augmenting Topologies (NEAT) method to control the behavior of particles. NEAT Particles evolves general-purpose particle effects, whereas NEAT Projectiles specializes in evolving particle weapon effects for video games. The primary advantage of this NEAT-based IEC approach is to decouple the creation of new effects from mathematics and programming, enabling content developers without programming knowledge to produce complex effects. Furthermore, it allows content designers to produce a broader range of effects than typical development tools. Finally, it acts as a concept generator, allowing content creators to interactively and efficiently explore the space of possible effects. Both NEAT Particles and NEAT Projectiles demonstrate how IEC can evolve useful content for graphical media and games, and are together a step toward the larger goal of automated content generation.},
author = {Hastings, Erin J. and Guha, Ratan K. and Stanley, Kenneth O.},
doi = {10.1109/TEVC.2008.2004261},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Hastings, Guha, Stanley - 2009 - Interactive evolution of particle systems for computer graphics and animation.pdf:pdf},
issn = {1089778X},
journal = {IEEE Transactions on Evolutionary Computation},
keywords = {Interactive evolutionary computation (IEC),Neuroevolution of augmenting topologies (NEAT),Particle systems},
number = {2},
pages = {418--432},
title = {{Interactive evolution of particle systems for computer graphics and animation}},
volume = {13},
year = {2009}
}
@article{Kass1990,
abstract = {We present a new method for animating water based on a simple, rapid and stable solution of a set of partial differential equations resulting from an approximation to the shallow water equations. The approximation gives rise to a version of the wave equation on a height-field where the wave velocity is proportional to the square root of the depth of the water. The resulting wave equation is then solved with an alternating-direction implicit method on a uniform finite-difference grid. The computational work required for an iteration consists mainly of solving a simple tridiagonal linear system for each row and column of the height field. A single iteration per frame suffices in most cases for convincing animation.Like previous computer-graphics models of wave motion, the new method can generate the effects of wave refraction with depth. Unlike previous models, it also handles wave reflections, net transport of water and boundary conditions with changing topology. As a consequence, the model is suitable for animating phenomena such as flowing rivers, raindrops hitting surfaces and waves in a fish tank as well as the classic phenomenon of waves lapping on a beach. The height-field representation prevents it from easily simulating phenomena such as breaking waves, except perhaps in combination with particle-based fluid models. The water is rendered using a form of caustic shading which simulates the refraction of illuminating rays at the water surface. A wetness map is also used to compute the wetting and drying of sand as the water passes over it.},
author = {Kass, Michael and Miller, Gavin},
doi = {10.1145/97880.97884},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Kass, Miller - 1990 - Rapid, stable fluid dynamics for computer graphics.pdf:pdf},
issn = {00978930},
journal = {Computer Graphics (ACM)},
number = {4},
pages = {49--57},
title = {{Rapid, stable fluid dynamics for computer graphics}},
volume = {24},
year = {1990}
}
@article{Boulianne2007,
abstract = {Background: Realistic biochemical simulators aim to improve our understanding of many biological processes that would be otherwise very difficult to monitor in experimental studies. Increasingly accurate simulators may provide insights into the regulation of biological processes due to stochastic or spatial effects. Results: We have developed GridCell as a three-dimensional simulation environment for investigating the behaviour of biochemical networks under a variety of spatial influences including crowding, recruitment and localization. GridCell enables the tracking and characterization of individual particles, leading to insights on the behaviour of low copy number molecules participating in signaling networks. The simulation space is divided into a discrete 3D grid that provides ideal support for particle collisions without distance calculation and particle search. SBML support enables existing networks to be simulated and visualized. The user interface provides intuitive navigation that facilitates insights into species behaviour across spatial and temporal dimensions. We demonstrate the effect of crowing on a Michaelis-Menten system. Conclusion: GridCell is an effective stochastic particle simulator designed to track the progress of individual particles in a three-dimensional space in which spatial influences such as crowding, co-localization and recruitment may be investigated. {\textcopyright} 2008 Boulianne et al; licensee BioMed Central Ltd.},
author = {Boulianne, Laurier and Dumontier, Michel and Gross, Warren J.},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Boulianne, Dumontier, Gross - 2007 - A stochastic particle-based biological system simulator.pdf:pdf},
isbn = {9781622763580},
journal = {Summer Computer Simulation Conference 2007, SCSC'07, Part of the 2007 Summer Simulation Multiconference, SummerSim'07},
keywords = {Biological systems,Particle systems,Stochastic simulation},
pages = {794--801},
title = {{A stochastic particle-based biological system simulator}},
volume = {2},
year = {2007}
}
@article{Szucs2019,
author = {Szűcs, {\'{A}}d{\'{a}}m Istv{\'{a}}n},
doi = {10.1556/606.2019.14.1.4},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Szűcs - 2019 - Improving graphics programming with shader tests.pdf:pdf},
issn = {17883911},
journal = {Pollack Periodica},
keywords = {Computing methodologies,Graphics programming,Rasterization,Shading,Software engineering},
number = {1},
pages = {35--46},
title = {{Improving graphics programming with shader tests}},
volume = {14},
year = {2019}
}
@article{Reeves1983,
abstract = {This paper introduces particle systems-a method for modeling fuzzy objects such as fire, clouds, and water. Particle systems model an object as a cloud of primitive particles that define its volume. Over a period of time, particles are generated into the system, move and change form within the system, and die from the system. The resulting model is able to represent motion, changes of form, and dynamics that are not possible with classical surface-based representations. The particles can easily be motion blurred, and therefore do not exhibit temporal aliasing or strobing. Stochastic processes are used to generate and control the many particles within a particle system. The application of particle systems to the wall of fire element from the Genesis Demo sequence of the film Star Trek II: The Wrath of Khan [10] is presented.},
author = {Reeves, William T.},
doi = {10.1145/800059.801167},
file = {:Users/robin/Desktop/Reeves-1983-PSA.pdf:pdf;:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Reeves - 1983 - Particle systems - Technique for modeling a class of fuzzy objects.pdf:pdf},
isbn = {0897911091},
journal = {Proceedings of the 10th Annual Conference on Computer Graphics and Interactive Techniques, SIGGRAPH 1983},
keywords = {Dynamic objects,Motion blur,Stochastic modeling,Temporal aliasing},
number = {2},
pages = {359--376},
title = {{Particle systems - Technique for modeling a class of fuzzy objects}},
volume = {2},
year = {1983}
}
@inproceedings{Penney2015,
author = {Penney, Devon and Zafar, Nafees Bin},
booktitle = {Proceedings - DigiPro 2015, Digital Production Symposium},
doi = {10.1145/2791261.2791265},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Penney, Zafar - 2015 - Rapid An artist friendly particle system.pdf:pdf},
isbn = {9781450337182},
keywords = {Particle simulation,Sparse volumes},
month = {aug},
pages = {15--19},
publisher = {Association for Computing Machinery, Inc},
title = {{Rapid: An artist friendly particle system}},
year = {2015}
}
@article{Crawford2018,
abstract = {For real-time graphics applications such as games and virtual reality, performance is crucial to provide a smooth user experience. Central to this is the performance of shader programs which render images on the GPU. The rise of low-level graphics APIs such as Vulkan means compilation tools play an increasingly important role in the graphics ecosystem. However, despite the importance of graphics, there is little published work on the impact of compiler optimization. This paper explores common features of graphics shaders, and examines the impact and applicability of common optimizations such as loop unrolling, and arithmetic reassociation. Combinations of optimizations are evaluated via exhaustive search across a wide set of shaders from the GFXBench 4.0 benchmark suite. Their impact is assessed across three desktop and two mobile GPUs from different vendors. We show that compiler optimization can have significant positive and negative impacts which vary across optimisations, benchmarks and platforms.},
author = {Crawford, Lewis and O'Boyle, Michael},
doi = {10.1109/ISPASS.2018.00035},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Crawford, O'Boyle - 2018 - A Cross-platform Evaluation of Graphics Shader Compiler Optimization.pdf:pdf},
isbn = {9781538650103},
journal = {Proceedings - 2018 IEEE International Symposium on Performance Analysis of Systems and Software, ISPASS 2018},
keywords = {Compilation,Compiler,Compiler Optimization,Fragment Shader,GPU,Graphics,Graphics Processing Unit,Shader},
pages = {219--228},
title = {{A Cross-platform Evaluation of Graphics Shader Compiler Optimization}},
year = {2018}
}
@article{Yongzhe2013,
author = {Yongzhe, X U and Lee, Kyunjoo and Kim, Eunju and Ki, Jaesug and Lee, Byungsoo},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Yongzhe et al. - 2013 - Simulation of Smoke to Improve Unity 3D Game Engine Particle System based on FDS.pdf:pdf},
keywords = {computer graphics,fds,fire dynamics simulator,fire simulation,fluid dynamics,particle,smoke,system,unity 3d},
pages = {183--186},
title = {{Simulation of Smoke to Improve Unity 3D Game Engine Particle System based on FDS}},
volume = {19},
year = {2013}
}
@article{Beaudoin2001,
abstract = {We introduce a set of techniques that are used together to produce realistic-looking animations of burning objects. These include a new method for simulating spreading on polygonal meshes. A key component of our approach consists in using individual flames as primitives to animate and render the fire. This simplification enables rapid computation and gives more intuitive control over the simulation without compromising realism. It also scales well, making it possible to animate phenomena ranging from simple candle-like flames to complex, widespread fires.},
author = {Beaudoin, Philippe and Paquet, S{\'{e}}bastien and Poulin, Pierre},
file = {:Users/robin/Desktop/Realistic{\_}and{\_}Controllable{\_}Fire{\_}Simulation.pdf:pdf;:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Beaudoin, Paquet, Poulin - 2001 - Realistic and controllable fire simulation.pdf:pdf},
issn = {07135424},
journal = {Proceedings - Graphics Interface},
keywords = {Fire,Implicit surfaces,Natural phenomena,Propagation on surfaces,Simulation,Volume rendering},
number = {January},
pages = {159--166},
title = {{Realistic and controllable fire simulation}},
year = {2001}
}
@article{Ungerer2003,
abstract = {Hardware multithreading is becoming a generally applied technique in the next generation of microprocessors. Several multithreaded processors are announced by industry or already into production in the areas of high-performance microprocessors, media, and network processors.A multithreaded processor is able to pursue two or more threads of control in parallel within the processor pipeline. The contexts of two or more threads of control are often stored in separate on-chip register sets. Unused instruction slots, which arise from latencies during the pipelined execution of single-threaded programs by a contemporary microprocessor, are filled by instructions of other threads within a multithreaded processor. The execution units are multiplexed between the thread contexts that are loaded in the register sets.Underutilization of a superscalar processor due to missing instruction-level parallelism can be overcome by simultaneous multithreading, where a processor can issue multiple instructions from multiple threads each cycle. Simultaneous multithreaded processors combine the multithreading technique with a wide-issue superscalar processor to utilize a larger part of the issue bandwidth by issuing instructions from different threads simultaneously.Explicit multithreaded processors are multithreaded processors that apply processes or operating system threads in their hardware thread slots. These processors optimize the throughput of multiprogramming workloads rather than single-thread performance. We distinguish these processors from implicit multithreaded processors that utilize thread-level speculation by speculatively executing compiler- or machine-generated threads of control that are part of a single sequential program.This survey paper explains and classifies the explicit multithreading techniques in research and in commercial microprocessors.},
author = {Ungerer, Theo and Robi{\v{c}}, Borut and {\v{S}}ilc, Jurij},
doi = {10.1145/641865.641867},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Ungerer, Robi{\v{c}}, {\v{S}}ilc - 2003 - A survey of processors with explicit multithreading.pdf:pdf},
issn = {03600300},
journal = {ACM Computing Surveys},
keywords = {Blocked multithreading,Interleaved multithreading,Simultaneous multithreading},
number = {1},
pages = {29--63},
title = {{A survey of processors with explicit multithreading}},
volume = {35},
year = {2003}
}
@article{Beeckler2008,
abstract = {Particle graphics simulations are well suited for modeling complex phenomena such as water, cloth, explosions, fire, smoke, and clouds. They are normally realized in software as part of an interactive graphics application. The computational complexity of particle graphics simulations restricts the number of particles that can be updated in software at interactive frame rates. This article presents the design and implementation of a hardware particle graphics engine for accelerating real-time particle graphics simulations. We explore the design process, implementation issues, and limitations of using field-programmable gate arrays (FPGAs) for the acceleration of particle graphics. The FPGA particle engine processes million-particle systems at a rate from 47 to 112 million particles per second, which represents one to two orders of magnitude speedup over a 2.8 GHz CPU. Using three FPGAs, a maximum sustained performance of 112 million particles per second was achieved.},
author = {Beeckler, John S. and Gross, Warren J.},
doi = {10.1145/1391732.1391735},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Beeckler, Gross - 2008 - Particle Graphics on Reconfigurable Hardware.pdf:pdf},
issn = {19367414},
journal = {ACM Transactions on Reconfigurable Technology and Systems},
keywords = {Algorithms,Design,FPGAs,Performance,Reconfigurable computing,particle systems,specialpurpose architectures},
number = {3},
pages = {1--27},
title = {{Particle Graphics on Reconfigurable Hardware}},
volume = {1},
year = {2008}
}
@article{McGuire2006,
abstract = {We describe an algorithm for rendering animated smoke particle systems in a cartoon style. This style includes outlines and cel- shading. For efficient self-shadowing effects, we introduce nailboard shadow volumes that create complex shadows from few polygons. Including shadows, the renderer draws only three polygons per particle and entirely avoids the latency of depth buffer readback. We combine the renderer with a fast simulator that generates the phenomenology of real smoke but has artistically controllable parameters. Together they produces real-time interactive smoke animations at over 30 fps. Thus our algorithm is well-suited to applications where interactive performance and expressive power are preferred to realism; for example, video games and rapid development of animation.},
author = {McGuire, Morgan and Fein, Andi},
doi = {10.1145/1124728.1124733},
file = {:Users/robin/Desktop/Real-time{\_}rendering{\_}of{\_}cartoon{\_}smoke{\_}and{\_}clouds.pdf:pdf;:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/McGuire, Fein - 2006 - Real-time rendering of cartoon smoke and clouds.pdf:pdf},
isbn = {1595933573},
journal = {NPAR Symposium on Non-Photorealistic Animation and Rendering},
keywords = {Cartoon,Non-photorealistic rendering,Shadows,Smoke},
number = {June 2006},
pages = {21--26},
title = {{Real-time rendering of cartoon smoke and clouds}},
volume = {2006},
year = {2006}
}
@article{Holopainen2008,
abstract = {In this paper we study the effect of an open environment to the behavior$\backslash$nof an autonomous mobile agent. The focus of our study is in the emergent$\backslash$nbehavior For this purpose, we use a particle system. With it, we$\backslash$ncan capture and simulate both the agent and its environment uniformly,$\backslash$nto reveal the emergent properties. We illustrate the use of a particle$\backslash$nsystem in analyzing the emergent behavior of a simple moving agent,$\backslash$nRoller, in order to improve its performance in an undetermined terrain.},
author = {Holopainen, Juha and R{\"{o}}nkk{\"{o}}, Mauno},
doi = {10.1109/IAT.2007.63},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Holopainen, R{\"{o}}nkk{\"{o}} - 2008 - Roller The effect of the environment to the emergence of behavior.pdf:pdf},
isbn = {0769530273},
journal = {Proceedings of the IEEE/WIC/ACM International Conference on Intelligent Agent Technology, IAT 2007},
keywords = {Emergent behavior,Open environment,Particle systems},
pages = {35--38},
title = {{Roller: The effect of the environment to the emergence of behavior}},
year = {2008}
}
@article{Reeves1985,
abstract = {Detail enhances the visual richness and realism of computer-generated images. Our stochastic modelling approach, called particle systems, builds complex pictures from sets of simple, volume-filling primitives. For example, structured particle systems have been used to generate trees and a grass-covered forest floor. Particle systems can produce so much irregular, three-dimensional detail that exact shading and visible surface calculations become infeasible. We describe approximate and probabilistic algorithms for shading and the visible surface problem. Because particle systems algorithms generate richly-detailed images, it is hard to detect any deviation from an exact rendering. Recent work in stochastic modelling also enables us to model complex motions with random variation, such as a field of grass blowing in the breeze. We analyze the performance of our current algorithms to understand the costs of our stochastic modelling approach.},
author = {Reeves, William T. and Blau, Ricki},
doi = {10.1145/325165.325250},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Reeves, Blau - 1985 - Approximate and Probabilistic Algorithms for Shading and Rendering Structured Particle Systems.pdf:pdf},
isbn = {0897911660},
issn = {00978930},
journal = {Computer Graphics (ACM)},
keywords = {1,and random variation in,approximation,as opposed to man-made,i n t r,natural,o d u c,objects exhibit an immense,stochastic modelling,t i o n,their detail,variety of irregular shapes},
number = {3},
pages = {313--322},
title = {{Approximate and Probabilistic Algorithms for Shading and Rendering Structured Particle Systems.}},
volume = {19},
year = {1985}
}
@phdthesis{Joseph2016,
abstract = {This study was conducted to take an in depth look at the newest application programming interfaces (API) offered to graphics programmers. With the recent releases of Vulkan (2016) and DirectX 12 (2015) from industry giants like the Khronos Group and Microsoft, it's clear they are pushing for a much lowerlevel, closer-to-hardware approach for future graphics programming solutions. These changes can be credited to the drastic improvements we've seen in graphics processors over the last 5 years. It will take a significant amount of time for these API's to become industry standard. The goal of this research is to verify the value and benefits of developing with these API's as opposed to using the current industry standard OpenGL or DirectX 11. Several GPU {\&} CPU benchmark performance tests have brought interesting results. Furthermore, many advanced computer graphical techniques and algorithms which are implemented using C++ and Vulkan, help to shine a spotlight on the glaring contrast between Vulkan and OpenGL. This research attempts to be one of the first validations for advantages or disadvantages the Vulkan API offers in comparison to its predecessors.},
author = {Joseph, Shiraef},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Joseph - 2016 - an Exploratory Study of High Performance Graphics Application Programming Interfaces.pdf:pdf},
keywords = {Application program interfaces (Computer software),Application software -- Development,Computer graphics},
school = {University of Tennessee at Chattanooga},
title = {{An Exploratory Study of High Performance Graphics Application Programming Interfaces}},
year = {2016}
}
@phdthesis{evalMultiThreadVulkan,
author = {Blackert, Axel},
booktitle = {Department of Electrical Engineering},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Blackert - Unknown - Evaluation of multi-threading in Vulkan.pdf:pdf},
school = {Link{\"{o}}ping University},
title = {{Evaluation of multi-threading in Vulkan}},
year = {2016}
}
@book{Crc2019,
author = {Crc, Hall and Chuon, Chansophea and Guha, Sumanta},
edition = {3},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Crc, Chuon, Guha - Unknown - Computer Graphics Through OpenGL From Theory to Experiments 3 rd Edition by Sumanta Guha.pdf:pdf},
isbn = {1138612642},
publisher = {Chapman and Hall/CRC},
title = {{Computer Graphics Through OpenGL : From Theory to Experiments 3 rd Edition by Sumanta Guha}},
year = {2019}
}
@book{Yu2013,
author = {Yu, Hongtao and Ko, Hou Jen and Li, Zhiyuan},
booktitle = {Proceedings of the ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)},
doi = {10.1145/2462156.2462182},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Boehm, Association for Computing Machinery. - 2013 - General Data Structure Expansion for Multi-threading.pdf:pdf},
isbn = {9781450320146},
keywords = {Multithreading,Parallelization,Privatization},
pages = {243--252},
publisher = {ACM},
title = {{General data structure expansion for multi-threading}},
year = {2013}
}
@techreport{Lander1997,
abstract = {Judging by the number of times the question comes up in public forums suchas Usenet, particle systems are a pretty hot issue. This may be partially a resultof the phenomenal success of QUAKE, with its use of particles for smoke,blood trails, and spark falls.},
author = {Lander, Jeff},
booktitle = {Game Developer Magazine},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/J. Lander - Unknown - The Ocean Spray in Your Face.pdf:pdf},
number = {July},
pages = {13--20},
title = {{The Ocean Spray in Your Face}},
year = {1997}
}
@inproceedings{Balci,
abstract = {We present a method for real-time simulation of 3D fire inspired by an old mechanical trick known as the "silk torch". Motivated by the proven illusive effect of silk torch, we model the kinematics of flames by a mass-spring system and its turbulent visual dynamics by texture sequencing with variable speeds and transparencies that depend on the speed of the vaporized fuel. The approach allows for incorporating external forces such as the gravity, and the wind force for added realism. Also, a specific characteristic of our method is that any object inserted in aflame can be modeled simply as an external force in the mass-spring system, making real-time interactions with fire a simple addition to the overall system. While the approach maintains an extremely low computational cost, these flexibilities increase the realism of our 3D fire by allowing for real-time control and the interactivity, which is a highly desirable requirement in applications such as augmented reality},
author = {Balci, Murat and Foroosh, Hassan},
booktitle = {MMM2006: 12th International Multi-Media Modelling Conference - Proceedings},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Balci - Unknown - Real-time 3D Fire Simulation Using a Spring-Mass Model.pdf:pdf},
isbn = {1424400287},
organization = {University of Central Florida},
pages = {108--115},
title = {{Real-time 3D fire simulation using a spring-mass model}},
volume = {2006},
year = {2006}
}
@article{Pinheiro2011,
abstract = {In this tutorial we intend to cover one of the innovations brought by DirectX11. Previous versions of DirectX didn't support native multithreading and most part of the API was not thread-safe. The user needed to add mutexes in the code to avoid race conditions in order to support a multi-threaded renderer. Moreover, the lack of native support wouldn't properly manage the swap of render states by multiple threads. This kind of guarantee can also be an application requirement. With the support of Deferred Contexts in DirectX11 the game engine can properly avoid the overhead on the submission thread being the bottleneck of the application. One may now queue API calls through command lists and multiple threads to be executed later. The API is now responsible for inter-thread synchronization for final submission to the GPU. The main goal behind multithreading is to use every cycle of CPU and GPU without making the GPU wait, which impacts the game frame rate. The full improvements set of DirectX 11 will be showed briefly, then the explanation of why states of the API must be synchronized for a proper rendering will follow. A considerable part of the course will explain how to use the Deferred Contexts and how to properly build command lists for later submission. The focus will be in the comparison to previous APIs, highlighting the issues of the previous versions that the new DirectX11 improvements had arisen from. Then we present some samples of code and cases that would have good performance improvements with the adoption of Deferred Contexts. During the samples exhibition, the important parts of the code should be discussed briefly at a high level of abstraction in order to give some consistency to the knowledge of the audience. This tutorial is a sequence of SBGames 2010 course entitled: "Un-derstanding Shader Model 5.0 with DirectX11" [Valdetaro et al. 2010]. In that tutorial we presented other set of innovations brought by DirectX11, which is the Tessellator pipeline.},
author = {Pinheiro, Rodrigo B and Valdetaro, Alexandre and Nunes, Gustavo B and Feijo, Bruno and Raposo, Alberto},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Pinheiro et al. - Unknown - Introduction to Multithreaded rendering and the usage of Deferred Contexts in DirectX 11.pdf:pdf},
journal = {Pontificia Universidade Catolica},
keywords = {Deferred Context,DirectX 11,Imme-diate Context,Multithreaded,Shader Model 5},
pages = {1--5},
title = {{Introduction to Multithreaded rendering and the usage of Deferred Contexts in DirectX 11 Threading Differences between DirectX}},
url = {http://www.tecgraf.puc-rio.br/{~}abraposo/pubs/SBGames2011/SBGames2011{\_}Tutorial.pdf},
year = {2011}
}
@techreport{Gillespie2008,
abstract = {The current generations of multi-core processors have successfully improved upon their single-core predecessors, in terms of performance, power consumption, and thermal properties. Hardware parallelism (in the form of the number of cores per processor) has taken the place of clock speed as the specification of first interest when describing a processor. Asymmetric multi-core computing (where various cores have different performance, architectural, and functional characteristics) is a likely candidate to be the next set of changes on this order of magnitude. This transition will extend the capability of multi-core processors to build performance and efficiency, giving rise to a significant set of software challenges and opportunities. Page},
author = {Gillespie, Matthew},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Gillespie - Unknown - Preparing for the Second Stage of Multi-Core Hardware Asymmetric (Heterogeneous) Cores.pdf:pdf},
institution = {Intel},
pages = {1--7},
title = {{White Paper Preparing for the Second Stage of Multi-Core Hardware : Asymmetric (Heterogeneous) Cores By Matt Gillespie Benefits of Asymmetric Multi-Core Architecture}},
year = {2009}
}
@article{Zhang2018,
author = {Zhang, Alex and Chen, Kan and Johan, Henry and Erdt, Marius},
doi = {10.1145/3283289.3283342},
file = {:Users/robin/Desktop/High performance city rendering in Vulkan.pdf:pdf;:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Zhang et al. - 2018 - High performance city rendering in Vulkan.pdf:pdf},
isbn = {9781450360630},
keywords = {acm reference format,massive rendering,texture streaming,vulkan},
pages = {1--2},
title = {{High performance city rendering in Vulkan}},
year = {2018}
}
@article{Miller1989,
abstract = {Connected particle systems can depict many objects difficult to model in any other fashion. We present a method for animating viscous fluids by simulating the forces of such particles interacting with each other. This method allows for collision detection between the particles and obstacles, both stationary and mobile, and it allows solid objects to break and melt. An approximate method for covering the particles with an isosurface for efficient rendering is also presented. {\textcopyright} 1989.},
author = {Miller, Gavin and Pearce, Andrew},
doi = {10.1016/0097-8493(89)90078-2},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Miller, Pearce - 1989 - Globular dynamics A connected particle system for animating viscous fluids.pdf:pdf},
issn = {00978493},
journal = {Computers and Graphics},
number = {3},
pages = {305--309},
title = {{Globular dynamics: A connected particle system for animating viscous fluids}},
volume = {13},
year = {1989}
}
@article{Stam1995,
abstract = {Developing a visually convincing model of fire, smoke, and other gaseousphenomenais amongthe most difficult and attractive problems in computer graphics. We have created new methods of animating a wide range of gaseous phenomena, including the particularly subtle problem of modelling wispy smoke and steam, using far fewer primitives than before. Onesignificant innovation is the reformulation and solution of the advection-diffusion equation for densities composed of warped blobs. These blobs more accurately model the distortions that gases undergo when advected by wind fields. We also introduce a simple model for the flame of a fire and its spread. Lastly, we present an efficient formulation and implementation of global illumination in the presence of gases and fire. Our models are specifically designed to permit a significant degree of user control over the evolution of gaseous phenomena.},
author = {Stam, Jos and Fiume, Eugene},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Stam, Fiume - 1995 - Depicting fire and other gaseous phenomena using diffusion processes.pdf:pdf},
isbn = {0897917014},
journal = {Proceedings of the ACM SIGGRAPH Conference on Computer Graphics},
keywords = {17,advec-,diffusion,fire,gaseous phenomena,graphics is by reeves,in which,light transport,multiple scattering,particle,related work in computer,smoke,systems,tion,turbulence,warped blobbies},
pages = {129--135},
title = {{Depicting fire and other gaseous phenomena using diffusion processes}},
year = {1995}
}
@article{McAllister2000,
abstract = {The  of an  for Particle Systems David K. McAllister  3  Goals The Particle System  was designed with specific goals and constraints. },
author = {McAllister, D},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/McAllister - 2000 - The design of an API for particle systems.pdf:pdf},
journal = {University of North Carolina Technical Report TR 00-007},
title = {{The design of an API for particle systems}},
url = {http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=pubmed{\&}cmd=Retrieve{\&}dopt=AbstractPlus{\&}list{\_}uids=17481640987080379559related:p8zVJdtDm{\_}IJ{\%}5Cnpapers2://publication/uuid/DC3F94DA-3B28-41F8-8ACF-4034602EFDE9},
year = {2000}
}
@article{Wei2002,
abstract = {We propose the use of textured splats as the basic display primitives for an open surface fire model. The high-detail textures help to achieve a smooth boundary of the fire and gain the small-scale turbulence appearance. We utilize the Lattice Boltzmann Model (LBM) to simulate physically-based equations describing the fire evolution and its interaction with the environment (e.g., obstacles, wind and temperature). The property of fuel and non-burning objects are defined on the lattice of the computation domain. A temperature field is also incorporated to model the generation of smoke from the fire due to incomplete combustion. The linear and local characteristics of the LBM enable us to accelerate the computation with graphics hardware to reach real-time simulation speed, while the texture splat primitives enable interactive rendering frame rates.},
author = {Wei, Xiaoming and Li, Wei and Mueller, Klaus and Kaufman, Arie},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Wei et al. - 2002 - Simulating fire with texture splats.pdf:pdf},
isbn = {0780374983},
journal = {Proceedings of the IEEE Visualization Conference},
keywords = {Fire Modeling,Graphics Hardware,Lattice Boltzmann Model,Textured Splatting},
number = {Cvc},
pages = {227--234},
title = {{Simulating fire with texture splats}},
year = {2002}
}
@inproceedings{Sampson2017,
abstract = {From windowing systems to virtual reality, real-time graphics code is ubiquitous. Programming models for constructing graphics software, however, have largely escaped the attention of programming languages researchers. This essay introduces the programming model of OpenGL, a ubiquitous API for real-time graphics applications, for a language-oriented audience. It highlights six broad problems with the programming model and connects them to traditions in PL research. The issues range from classic pitfalls, where established thinking can apply, to new open problems, where novel research is needed.},
author = {Sampson, Adrian},
booktitle = {Leibniz International Proceedings in Informatics, LIPIcs},
doi = {10.4230/LIPIcs.SNAPL.2017.14},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Sampson - 2017 - Let's fix openGL.pdf:pdf},
isbn = {9783959770323},
issn = {18688969},
keywords = {GPUs,Heterogeneity,Language design,OpenGL,Real-time graphics},
month = {may},
publisher = {Schloss Dagstuhl- Leibniz-Zentrum fur Informatik GmbH, Dagstuhl Publishing},
title = {{Let's fix openGL}},
volume = {71},
year = {2017}
}
@article{Patney2015,
abstract = {In a prior study on electronic cigarette (EC) refill fluids, Cinnamon Ceylon was the most cytotoxic of 36 products tested. The purpose of the current study was to determine if high cytotoxicity is a general feature of cinnamon-flavored EC refill fluids and to identify the toxicant(s) in Cinnamon Ceylon. Eight cinnamon-flavored refill fluids, which were screened using the MTT assay, varied in their cytotoxicity with most being cytotoxic. Human embryonic stem cells were generally more sensitive than human adult pulmonary fibroblasts. Most products were highly volatile and produced vapors that impaired survival of cells in adjacent wells. Cinnamaldehyde (CAD), 2-methoxycinnamaldehyde (2MOCA), dipropylene glycol, and vanillin were identified in the cinnamon-flavored refill fluids using gas chromatography-mass spectrometry and high-pressure liquid chromatography (HPLC). When authentic standards of each chemical were tested using the MTT assay, only CAD and 2MOCA were highly cytotoxic. The amount of each chemical in the refill fluids was quantified using HPLC, and cytotoxicity correlated with the amount of CAD/product. Duplicate bottles of the same product were similar, but varied in their concentrations of 2MOCA. These data show that the cinnamon flavorings in refill fluids are linked to cytotoxicity, which could adversely affect EC users. {\textcopyright} 2013 Elsevier Ltd.},
author = {Patney, Anjul and Tzeng, Stanley and Seitz, Kerry A. and Owens, John D.},
doi = {10.1145/2766973},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Patney et al. - 2015 - Piko A framework for authoring programmable graphics pipelines.pdf:pdf},
issn = {15577368},
journal = {ACM Transactions on Graphics},
keywords = {Graphics pipelines,Parallel computing},
number = {4},
title = {{Piko: A framework for authoring programmable graphics pipelines}},
volume = {34},
year = {2015}
}
@article{Jones2017,
abstract = {In this paper we present a physically-based model for simulating realistic interactions between liquid droplets in an efficient manner. Our particle-based system recreates the coalescence, separation and fragmentation interactions that occur between colliding liquid droplets and allows systems of droplets to be meaningfully represented by an equivalent number of simulated particles. By considering the interactions specific to liquid droplet phenomena directly, we display novel levels of detail that cannot be captured using other interaction models at a similar scale. Our work combines experimentally validated components, originating in engineering, with a collection of novel modifications to create a particle-based interaction model for use in the development of mid-to-large scale droplet-based liquid spray effects. We demonstrate this model, alongside a size-dependent drag force, as an extension to a commonly-used ballistic particle system and show how the introduction of these interactions improves the quality and variety of results possible in recreating liquid droplets and sprays, even using these otherwise simple systems.},
author = {Jones, Richard and Southern, Richard},
doi = {10.1145/3099564.3099573},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Jones, Southern - 2017 - Physically-based droplet interaction.pdf:pdf},
isbn = {9781450350914},
journal = {Proceedings - SCA 2017: ACM SIGGRAPH / Eurographics Symposium on Computer Animation},
keywords = {Fluid simulation, Particle systems},
title = {{Physically-based droplet interaction}},
year = {2017}
}
@article{Burg2000,
author = {Burg, J Van Der},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Burg - 2000 - Building an advanced particle system.pdf:pdf},
journal = {Gamasutra},
title = {{Building an advanced particle system}},
url = {http://homepage.ttu.edu.tw/jmchen/gameprog/slides/particle system.pdf},
year = {2000}
}
@article{Selle2004,
abstract = {We describe a technique for generating cartoon style animations of smoke. Our method takes the output of a physically-based simu- lator and uses it to drive particles that are rendered using a variant of the depth differences technique (originally used for rendering trees). Specic issues we address include the placement and evo- lution of primitives in the ow and the maintenance of temporal coherence. The results are visually simple, icker-free animations that convey the turbulent, dynamic nature of the gas with simple outlines.},
author = {Selle, Andrew and Mohr, Alex and Chenney, Stephen},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Selle, Mohr, Chenney - 2004 - Cartoon rendering of smoke animations.pdf:pdf},
journal = {NPAR Symposium on Non-Photorealistic Animation and Rendering},
keywords = {Cartoon rendering,Non-photorealistic rendering,Smoke rendering,Smoke simulation},
pages = {57--60},
title = {{Cartoon rendering of smoke animations}},
year = {2004}
}
@article{Li2011,
author = {Li, Hua and Mould, David},
doi = {10.1145/2024676.2024697},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Li, Mould - 2011 - Artistic tessellations by growing curves.pdf:pdf},
isbn = {9781450309073},
journal = {NPAR Symposium on Non-Photorealistic Animation and Rendering},
keywords = {Mosaics,Natural patterns,Particle system,Tessellation},
number = {212},
pages = {125--133},
title = {{Artistic tessellations by growing curves}},
volume = {1},
year = {2011}
}
@article{Li2004,
abstract = {Simultaneous multithreading (SMT) has proven to be an effective method of increasing the performance of microprocessors by extracting additional instruction-level parallelism from multiple threads. In current microprocessor designs, power-efficiency is of critical importance, and we present modeling extensions to an architectural simulator to allow us to study the power-performance efficiency of SMT. After a thorough design space exploration we find that SMT can provide a performance speedup of nearly 20{\%} for a wide range of applications with a power overhead of roughly 24{\%}. Thus, SMT can provide a substantial benefit for energy-efficiency metrics such as ED 2 . We also explore the underlying reasons for the power uplift, analyze the impact of leakage-sensitive process technologies, and discuss our model validation strategy.},
author = {Li, Yingmin and Brooks, David and Hu, Zhigang and Skadron, Kevin and Bose, Pradip},
doi = {10.1109/LPE.2004.240758},
file = {:Users/robin/Library/Application Support/Mendeley Desktop/Downloaded/Li et al. - 2004 - Understanding the Energy Efficiency of Simultaneous Multithreading.pdf:pdf},
isbn = {1581139292},
issn = {15334678},
journal = {Proceedings of the International Symposium on Low Power Electronics and Design},
keywords = {Multithreading},
number = {January},
pages = {44--49},
title = {{Understanding the Energy Efficiency of Simultaneous Multithreading}},
volume = {2004-January},
year = {2004}
}
